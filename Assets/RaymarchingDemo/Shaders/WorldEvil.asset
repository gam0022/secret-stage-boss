%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 3acd6fe57257048db802c1c4c2b75248, type: 3}
  m_Name: WorldEvil
  m_EditorClassIdentifier: 
  shaderName: WorldEvil
  shaderReference: {fileID: 4800000, guid: 2ef7d3d32af0c0f4787595286b578650, type: 3}
  shaderTemplate: uRaymarching/Deferred/Standard
  variables:
  - key: Name
    value: WorldEvil
  - key: ObjectShape
    value: NONE
  - key: RaymarchingShaderDirectory
    value: Assets\uRaymarching\Shaders\Include\Legacy
  - key: RenderType
    value: Opaque
  - key: RenderQueue
    value: Geometry
  conditions:
  - key: ShadowCaster
    value: 0
  - key: FullScreen
    value: 1
  - key: WorldSpace
    value: 1
  - key: FollowObjectScale
    value: 0
  - key: CameraInsideObject
    value: 1
  - key: UseRaymarchingDepth
    value: 1
  - key: FallbackToDiffuse
    value: 0
  - key: Blend
    value: 0
  - key: UseCameraDepthTexture
    value: 0
  - key: DisableViewCulling
    value: 0
  - key: SphericalHarmonicsPerPixel
    value: 1
  - key: UseGrabPass
    value: 0
  - key: ForwardAdd
    value: 0
  - key: FallbackToStandardShader
    value: 0
  blocks:
  - key: Properties
    value: "        [Header(World)]\n        _EvilRepeat (\"Evil Repeat\", Vector)
      = (20, 20, 20, 1)\n        _IfsLoop (\"Ifs Loop\", Range(1, 10)) = 5\n       
      _EvilOffset (\"Evil Offset\", Vector) = (0, 0, 0, 1)\n        _RotateXY1 (\"_RotateXY1\",
      Range(-4, 4)) = 0.3\n        _RotateXZ1 (\"_RotateXZ1\", Range(-4, 4)) = -0.1\n       
      _RotateYZ1 (\"_RotateYZ1\", Range(-4, 4)) = -0.1\n        _FoldRotate (\"Fold
      Rotate\", Range(1, 20)) = 6\n        _EvilBoxSize (\"Evil Box Size\", Vector)
      = (5, 0.5, 0.5, 1)\n        _EvilScale (\"Evil Scale\", Range(0, 2)) = 1.1\n       
      [HDR] _EmissionColor (\"Emission Color\", Color) = (1, 1, 1, 1)"
    folded: 0
  - key: DistanceFunction
    value: "        #include \"Common.cginc\"\n\n        float3 _EvilRepeat;\n       
      float _IfsLoop;\n        float4 _EvilOffset;\n        float _RotateXY1;\n       
      float _RotateXZ1;\n        float _RotateYZ1;\n        float3 _EvilBoxSize;\n       
      float _EvilScale;\n        float4 _EmissionColor;\n\n        inline float DistanceFunction(float3
      pos)\n        {\n            float4 p = float4(pos, 1);\n            p.xyz
      = Repeat(p.xyz, _EvilRepeat);\n\n            for (int i = 0; i < _IfsLoop;
      i++)\n            {\n                // p -= _EvilOffset;\n               
      p.xyz = abs(p.xyz);\n                p.xyz -= _EvilOffset;\n               
      p.xy = mul(rotate(_RotateXY1), p.xy);\n                p.xz = mul(rotate(_RotateXZ1),
      p.xz);\n                p.yz = mul(rotate(_RotateYZ1), p.yz);\n               
      p *= _EvilScale;\n            }\n\n            float3 size = _EvilBoxSize;\n           
      // size.x += _AudioSpectrumLevels[0] * 50;\n            float d = sdBox(p.xyz,
      size) / abs(p.w);\n\n            return d;\n        }"
    folded: 0
  - key: PostEffect
    value: "        #define map DistanceFunction\n\n        // https://www.shadertoy.com/view/lttGDn\n       
      float calcEdge(float3 p)\n        {\n            float edge = 0.0;\n           
      float2 e = float2(.1, 0);\n\n            // Take some distance function measurements
      from either side of the hit point on all three axes.\n            float d1
      = map(p + e.xyy), d2 = map(p - e.xyy);\n            float d3 = map(p + e.yxy),
      d4 = map(p - e.yxy);\n            float d5 = map(p + e.yyx), d6 = map(p - e.yyx);\n           
      float d = map(p) * 2.;\t// The hit point itself - Doubled to cut down on calculations.
      See below.\n\n            // Edges - Take a geometry measurement from either
      side of the hit point. Average them, then see how\n            // much the
      value differs from the hit point itself. Do this for X, Y and Z directions.
      Here, the sum\n            // is used for the overall difference, but there
      are other ways. Note that it's mainly sharp surface\n            // curves
      that register a discernible difference.\n            edge = abs(d1 + d2 - d)
      + abs(d3 + d4 - d) + abs(d5 + d6 - d);\n            //edge = max(max(abs(d1
      + d2 - d), abs(d3 + d4 - d)), abs(d5 + d6 - d)); // Etc.\n\n            //
      Once you have an edge value, it needs to normalized, and smoothed if possible.
      How you\n            // do that is up to you. This is what I came up with for
      now, but I might tweak it later.\n            edge = smoothstep(0., 1., sqrt(edge
      / e.x * 2.));\n\n            // Return the normal.\n            // Standard,
      normalized gradient mearsurement.\n            return edge;\n        }\n\n       
      inline void PostEffect(RaymarchInfo ray, inout PostEffectOutput o)\n       
      {\n            float edge = calcEdge(ray.endPos) * saturate(cos(_Beat * TAU
      - Mod(0.1 * ray.endPos.z, TAU)));\n\n            o.Emission = _EmissionColor
      * edge;\n        }"
    folded: 0
  constants: {fileID: 11400000, guid: b54b57bcc672e49638fe9b2da609c4df, type: 2}
  basicFolded: 1
  conditionsFolded: 0
  variablesFolded: 0
  materialsFolded: 0
  constantsFolded: 0
