%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 3acd6fe57257048db802c1c4c2b75248, type: 3}
  m_Name: Ship
  m_EditorClassIdentifier: 
  shaderName: Ship
  shaderReference: {fileID: 4800000, guid: 33133defc5bf82847a808e69ffac1c8e, type: 3}
  shaderTemplate: uRaymarching/Deferred/Standard
  variables:
  - key: Name
    value: Ship
  - key: ObjectShape
    value: CUBE
  - key: RaymarchingShaderDirectory
    value: Assets\uRaymarching\Shaders\Include\Legacy
  conditions:
  - key: ShadowCaster
    value: 1
  - key: FullScreen
    value: 0
  - key: WorldSpace
    value: 0
  - key: FollowObjectScale
    value: 0
  - key: CameraInsideObject
    value: 1
  - key: UseRaymarchingDepth
    value: 1
  - key: FallbackToDiffuse
    value: 1
  - key: SphericalHarmonicsPerPixel
    value: 1
  - key: FallbackToStandardShader
    value: 1
  blocks:
  - key: Properties
    value: '        [HDR] _EmissionColor ("Emission Color", Color) = (1, 1, 1, 1)'
    folded: 0
  - key: DistanceFunction
    value: "        #include \"Common.cginc\"\n\n        float4 _EmissionColor;\n\n       
      float dEngine(float3 pos)\n        {\n            float3 p = pos;\n           
      float r = cos((pos.y + 0.3) * 1.0) * 0.3;\n\n            // \u7D30\u304B\u3044\u67A0\n           
      p.xz = foldRotate(pos.xz, 12);\n            p.y -= 0.3 * abs(p.x);\n           
      p.y = opRepRange(p.y, 0.03, 0.7);\n            p.z -= r + 0.1;\n           
      float d = sdBox(p, float3(0.1, 0.01, 0.02));\n\n            // \u592A\u3044\u67A0\u30FB\u7E26\n           
      p = pos;\n            p.xz = foldRotate(pos.xz, 6);\n            p.z -= r +
      0.1;\n            d = min(d, sdBox(p, float3(0.1 + 0.04 * (p.y - 1.0), 0.75,
      0.05)));\n\n            // \u592A\u3044\u67A0\u30FB\u6A2A\n            p =
      pos;\n            p.xz = foldRotate(pos.xz, 6);\n            p.y = opRepRange(p.y,
      0.24, 0.7);\n            p.z -= r + 0.15;\n            d = min(d, sdBox(p,
      float3(0.3, 0.03, 0.02)));\n\n            // \u82AF\u7DDA\n            d =
      min(d, sdCappedCylinder(pos, cos(abs(1.9 * pos.y)) * 0.2, 0.9));\n\n           
      // \u30B3\u30F3\u30D7\u30EC\u30C3\u30B5\u30FC\u30FB\u30BF\u30FC\u30D3\u30F3\n           
      p = pos;\n            p.y = opRepRange(p.y, 0.15, 0.7);\n            p.xz =
      mul(rotate(_Beat), p.xz);\n            p.xz = foldRotate(p.xz, 12 * 2);\n           
      p.z -= 0.18;\n            p.xy = mul(rotate(0.3 + 2 * p.z), p.xy);\n           
      float dFan = sdBox(p, float3(0.02, 0.002, 0.1)) * 0.7;\n            d = min(d,
      dFan);\n\n            return d;\n        }\n\n        float dEngines(float3
      pos)\n        {\n            float3 p1 = pos;\n            p1.z -= 0.9;\n           
      p1.y -= -1.1;\n            return dEngine(p1);\n        }\n\n        inline
      float DistanceFunction(float3 pos)\n        {\n            float3 p = pos;\n\n           
      p.xz = foldRotate(p.xz, 3);\n\n            // \u30A8\u30F3\u30B8\u30F3\n           
      float d = dEngines(p);\n\n            // \u30B8\u30E7\u30A4\u30F3\u30C8\n           
      float3 p2 = p;\n            p2.y -= -1.4;\n            float dJoint = sdBox(p2,
      float3(0.1, 0.1, 0.6));\n            d = min(d, dJoint);\n\n            //
      \u30B3\u30AF\u30D4\u30C3\u30C8\n            float3 p3 = p;\n            float
      bodyLength = 1.7;\n            float bodyWidth = 0.3 * abs(cos((p.y + bodyLength)
      * TAU / bodyLength / 8));\n            float dBody = sdBox(p3, float3(bodyWidth,
      bodyLength, bodyWidth));\n            d = min(d, dBody);\n\n            return
      d;\n        }"
    folded: 0
  - key: PostEffect
    value: "        inline void PostEffect(RaymarchInfo ray, inout PostEffectOutput
      o)\n        {\n            float3 p = ToLocal(ray.endPos) * GetScale();\n\n           
      p.xz = foldRotate(p.xz, 3);\n            \n            if (dEngines(p) < 0.1)\n           
      {\n                o.Emission = _EmissionColor;\n            }\n           
      else\n            {\n                o.Smoothness = 0.95;\n               
      o.Metallic = 1;\n                o.Occlusion = 0;\n                o.Albedo
      = half3(1, 1, 1);\n            }\n        }"
    folded: 0
  constants: {fileID: 11400000, guid: b54b57bcc672e49638fe9b2da609c4df, type: 2}
  basicFolded: 1
  conditionsFolded: 1
  variablesFolded: 1
  materialsFolded: 0
  constantsFolded: 1
