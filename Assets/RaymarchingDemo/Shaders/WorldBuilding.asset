%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 3acd6fe57257048db802c1c4c2b75248, type: 3}
  m_Name: WorldBuilding
  m_EditorClassIdentifier: 
  shaderName: WorldBuilding
  shaderReference: {fileID: 4800000, guid: 2ef7d3d32af0c0f4787595286b578650, type: 3}
  shaderTemplate: uRaymarching/Deferred/Standard
  variables:
  - key: Name
    value: WorldBuilding
  - key: ObjectShape
    value: NONE
  - key: RaymarchingShaderDirectory
    value: Assets\uRaymarching\Shaders\Include\Legacy
  - key: RenderType
    value: Opaque
  - key: RenderQueue
    value: Geometry
  conditions:
  - key: ShadowCaster
    value: 0
  - key: FullScreen
    value: 1
  - key: WorldSpace
    value: 1
  - key: FollowObjectScale
    value: 0
  - key: CameraInsideObject
    value: 1
  - key: UseRaymarchingDepth
    value: 1
  - key: FallbackToDiffuse
    value: 0
  - key: Blend
    value: 0
  - key: UseCameraDepthTexture
    value: 0
  - key: DisableViewCulling
    value: 0
  - key: SphericalHarmonicsPerPixel
    value: 1
  - key: UseGrabPass
    value: 0
  - key: ForwardAdd
    value: 0
  - key: FallbackToStandardShader
    value: 0
  blocks:
  - key: Properties
    value: "        [Header(World)]\n        _HexagonRadians (\"Hexagon Radians\",
      Range(0, 5)) = 1\n        _HexagonPadding (\"Hexagon Padding\", Range(0, 1))
      = 0.1\n        [HDR] _EmissionColorEdge (\"Emission Color Edge\", Color) =
      (1, 1, 1, 1)\n        [HDR] _EmissionColorVoronoi (\"Emission Color Voronoi\",
      Color) = (1, 1, 1, 1)\n        _ChangeThresholdZ (\"Change Threshold Z\", Float)
      = 0\n        _ChangeRate (\"Change Rate\", Range(0, 1)) = 0\n        _WingSize
      (\"Wing Size\", Vector) = (0.1, 0.1, 0.1, 0.1)\n        _WingRot (\"Wing Rot\",
      Range(-4, 4)) = 0.3"
    folded: 0
  - key: DistanceFunction
    value: "        #include \"Common.cginc\"\n\n        float _HexagonRadians;\n       
      float _HexagonPadding;\n        float4 _EmissionColorEdge;\n        float4
      _EmissionColorVoronoi;\n        float _ChangeThresholdZ;\n        float _ChangeRate;\n       
      float4 _WingSize;\n        float _WingRot;\n\n        float dHexagon(float3
      pos)\n        {\n            float3 p1 = pos;\n\n            p1.xz = foldRotate(p1.xz,
      6);\n            float d = sdBox(p1, float3(_HexagonRadians, 1, _HexagonRadians));\n\n           
      float3 p2 = p1;\n            p2.z = opRepRange(p2.z, 0.1, _HexagonRadians);\n           
      p2.y += p1.z * 0.2 * _ChangeRate;\n            d = min(d, sdBox(p2, float3(_HexagonRadians
      * 0.2, 1, 0.02)));\n\n            float3 p3 = p1;\n            p3.y += _ChangeRate;\n           
      d = min(d, sdBox(p3, float3(0.1, 1 * _ChangeRate, 0.1)));\n\n            float3
      p4 = p1;\n\n            p4.y += _WingSize.w;\n            \n            /*for
      (int i = 0; i < 3; i++)\n            {\n                p4.xy = abs(p4.xy);\n               
      p4.xy = mul(rotate(0.3), p4.xy);\n                p4.xz = mul(rotate(-0.1),
      p4.xz);\n            }*/\n\n            rot(p4.yz, _WingRot);\n\n           
      d = min(d, sdBox(p4, _WingSize.xyz));\n\n            return d;\n        }\n\n       
      float2 dHexagons(float3 pos)\n        {\n            float3 p = pos;\n\n           
      float pitch = _HexagonRadians * 2 + _HexagonPadding;\n            float sqrt3_div_2
      = 0.8660254037844386467637231707529361834714026269051903140279034897;\n           
      float3 offset = float3(pitch * sqrt3_div_2, 0, pitch * 0.5);\n            float3
      loop = float3(offset.x * 2, 10, offset.z * 2);\n            \n            float3
      p1 = p;\n            float3 p2 = p + offset;\n\n            // calculate indices\n           
      float2 pi1 = floor(p1 / loop).xz;\n            float2 pi2 = floor(p2 / loop).xz;\n           
      pi1.y = pi1.y * 2;\n            pi2.y = pi2.y * 2 + 1;\n\n            p1.y
      += 0.5 * sin(10 * Rand(pi1) + 0.1 * TAU * _Beat);\n            p2.y += 0.5
      * sin(10 * Rand(pi2) + 0.1 * TAU * _Beat);\n            p1 = Repeat(p1, loop);\n           
      p2 = Repeat(p2, loop);\n\n            float2 res = float2(dHexagon(p1), pi1.y);\n           
      res = opU(res, float2(dHexagon(p2), pi2.y));\n\n            return res;\n       
      }\n\n        inline float DistanceFunction(float3 pos)\n        {\n           
      float2 res = dHexagons(pos);\n            return res.x;\n        }"
    folded: 0
  - key: PostEffect
    value: "        inline void PostEffect(RaymarchInfo ray, inout PostEffectOutput
      o)\n        {\n            float3 p = ray.endPos;\n            float2 res =
      dHexagons(p);\n\n            float edge = calcEdge(ray.endPos, 0.01);\n           
      o.Emission += _EmissionColorEdge * edge * _AudioSpectrumLevels[0];\n\n           
      float voro = voronoi(ray.endPos.xz) + 0.5 * voronoi(ray.endPos.xz * 2.0);\n           
      o.Emission += _EmissionColorVoronoi * voro * saturate(cos(_Beat * TAU - Mod(0.1
      * p.z, TAU)));\n\n            if (res.y < floor(_ChangeThresholdZ + _ShipPosition.z))\n           
      {\n                // emissionColor = hsvToRgb(float3(res.y * 0.1, 1, 1));\n               
      o.Albedo = fixed3(1, 1, 1);\n            }\n        }"
    folded: 0
  constants: {fileID: 11400000, guid: b54b57bcc672e49638fe9b2da609c4df, type: 2}
  basicFolded: 1
  conditionsFolded: 0
  variablesFolded: 0
  materialsFolded: 0
  constantsFolded: 0
